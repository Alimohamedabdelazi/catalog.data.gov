# use 'listen 80 deferred;' for Linux
# use 'listen 80 accept_filter=httpready;' for FreeBSD
listen {{port}};
client_max_body_size 250M;

keepalive_timeout 5;

# path for static files
root ./public;

# redirect /en/ locales to english
location ~ ^/en/(.*) {
  return  301 $scheme://$redirect_url/$1;
}

location / {
  # Protect catalog from expensive API calls
  rewrite ^/api/rest/dataset$ $scheme://$redirect_url/api/action/package_search redirect;
  rewrite ^/api/1/rest/dataset$ $scheme://$redirect_url/api/3/action/package_search redirect;
  rewrite ^/api/2/rest/dataset$ $scheme://$redirect_url/api/3/action/package_search redirect;

  rewrite ^/api/action/package_list$ $scheme://$redirect_url/api/action/package_search redirect;
  rewrite ^/api/3/action/package_list$ $scheme://$redirect_url/api/3/action/package_search redirect;

  rewrite ^/api/action/current_package_list_with_resources$ $scheme://$redirect_url/api/action/package_search redirect;
  rewrite ^/api/3/action/current_package_list_with_resources$ $scheme://$redirect_url/api/3/action/package_search redirect;

  rewrite ^/api/3/action/resource_search$ $scheme://$redirect_url/api/action/package_search redirect;
  rewrite ^/api/action/resource_search$ $scheme://$redirect_url/api/action/package_search redirect;

  # checks for static file, if not found proxy to app
  try_files $uri @proxy_to_app;
}

location @proxy_to_app {
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  # proxy_set_header Host $http_host;
  # we don't want nginx trying to do something clever with
  # redirects, we set the Host: header above already.
  proxy_redirect off;
  set $backend_servers $internal_url:61443;
  proxy_pass https://${backend_servers}${request_uri};
}

error_page 500 502 503 504 /500.html;
location = /500.html {
  root ./public;
}
