---
name: 4 - Automated CKAN Jobs

on:   # yamllint disable-line rule:truthy
  schedule:
    - cron: '30 7 * * *'       # Tracking Update -- every day at 7:30am UTC
    - cron: '0 3 * * *'        # S3 Sitemap Update -- every day at 3am UTC
    - cron: '11/15 * * * *'    # Harvester Check -- every 15 mins
    - cron: '0 4 * * *'        # DB-Solr-Sync -- every day at 4am UTC
    - cron: '0 5 * * *'        # Check Stuck Jobs -- every day at 5am UTC

env:
  ERROR: false

jobs:
  ckan-auto-command:
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        schedule: ['30 7 * * *', '0 3 * * *', '11/15 * * * *', '0 4 * * *', '0 5 * * *']   # yamllint disable-line rule:line-length
        environ: [development, staging, prod]
        include:
          # Default app to run tasks on
          - app: catalog-admin
          # Default timeout for task to raise issue
          - error_seconds: 22000
          # Default monitor everything
          - monitor: true
          # Attach commands to schedule
          - schedule: '30 7 * * *'
            command: "ckan geodatagov tracking-update"
          - schedule: '11/15 * * * *'
            command: "ckan harvester run"
          - schedule: '0 4 * * *'
            command: "ckan geodatagov db-solr-sync"
          - schedule: '0 5 * * *'
            command: "ckan geodatagov check-stuck-jobs"
          - schedule: '0 3 * * *'
            command: "ckan geodatagov sitemap-to-s3"
          # Run sitemap-to-s3 on catalog-gather
          - schedule: '0 3 * * *'
            app: catalog-gather
          # Don't monitor 'harvester run'
          - schedule: '11/15 * * * *'
            monitor: false
          # Don't monitor 'sitemap-to-s3'
          - schedule: '0 3 * * *'
            monitor: false
          # If tracking update takes longer than 210 mins, make an issue
          - schedule: '30 7 * * *'
            error_seconds: 12600
          # If db solr sync takes longer than 30 mins, make an issue
          - schedule: '0 4 * * *'
            error_seconds: 1800
          # Adjust RAM per space
          - environ: development
            ram: 1G
          - environ: staging
            ram: 3G
          - environ: prod
            ram: 3G
        exclude:
          # Don't run 'sitemap-to-s3' on development/staging
          - schedule: '0 3 * * *'
            environ: development
          - schedule: '0 3 * * *'
            environ: staging
          # Don't run 'db-solr-sync' on development
          - schedule: '0 5 * * *'
            environ: development
    name: ${{ matrix.command }} - ${{matrix.environ}}
    runs-on: ubuntu-latest
    environment: ${{matrix.environ}}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set Unique Command Name
        # yamllint disable rule:line-length
        run: |
          INSTANCE_NAME="$(echo ${{ matrix.command }}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT})"
          echo "INSTANCE_NAME=${INSTANCE_NAME}" | tee -a $GITHUB_ENV
          START=$SECONDS | tee -a $GITHUB_ENV
          # yamllint enable rule:line-length
      - name: ${{ matrix.command }}
        if: ${{ github.event.schedule == matrix.schedule }}
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            cf run-task ${{ matrix.app }}
            --command "${{ matrix.command }}"
            --name "$INSTANCE_NAME"
            -m ${{ matrix.ram }} -k 2G
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: monitor task output
        if: ${{ matrix.monitor && github.event.schedule == matrix.schedule }}
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            tools/monitor_cf_logs.sh ${{ matrix.app }} $INSTANCE_NAME &&
            ELAPSED=$(( SECONDS - START)) &&
            if [[ $ELAPSED > ${{ matrix.error_seconds }} ]]; then ERROR=true | tee -a $GITHUB_ENV; fi;
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() || (env.ERROR == true) }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
          COMMAND: ${{ matrix.command }}
          SCHEDULE: ${{ matrix.schedule }}
          ENVIRONMENT: ${{ matrix.environ }}
        with:
          filename: .github/automated_ckan_error.md
          assignees: ${{ github.actor }}
          update_existing: true
