---
name: 4 - Automated CKAN Jobs

on:   # yamllint disable-line rule:truthy
  schedule:
    - cron: '30 7 * * *'       # Tracking Update -- every day at 2:30am EST
    - cron: '0 2 * * *'        # S3 Sitemap Update -- every day at 7pm EST
    - cron: '4/15 5-23 * * *'  # Harvester Check -- every 15 mins between 12am and 6pm EST   # yamllint disable-line rule:line-length
    - cron: '0 3 * * *'        # DB-Solr-Sync -- every day at 10pm EST
    - cron: '0 4 * * *'        # Check Stuck Jobs -- every day at 11pm EST

env:
  ERROR: false
  # Make sure 'schedule-cron' matches these varaibles.
  SCHEDULE_TRACKING: '30 7 * * *'
  SCHEDULE_SITEMAP: '0 2 * * *'
  SCHEDULE_HARVESTING: '4/15 5-23 * * *'
  SCHEDULE_STUCK_JOBS: '0 3 * * *'
  SCHEDULE_DBSOLR_SYNC: '0 4 * * *'

jobs:
  ckan-auto-command:
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        schedule: [
          $SCHEDULE_TRACKING, $SCHEDULE_SITEMAP, $SCHEDULE_HARVESTING,
          $SCHEDULE_STUCK_JOBS, $SCHEDULE_DBSOLR_SYNC
        ]
        environ: [development, staging, prod]
        include:
          # Default app to run tasks on
          - app: catalog-admin
          # Default timeout for task to raise issue
          - error_seconds: 22000
          # Create an Information Issue for jobs we want to inspect
          - info_issue: false
          - issue_template: .github/automated_ckan_error.md
          # Default monitor everything
          - monitor: true
          # Attach commands to schedule
          - schedule: $SCHEDULE_TRACKING
            command: "ckan geodatagov tracking-update"
          - schedule: $SCHEDULE_HARVESTING
            command: "ckan harvester run"
          - schedule: $SCHEDULE_DBSOLR_SYNC
            command: "ckan geodatagov db-solr-sync"
          - schedule: $SCHEDULE_STUCK_JOBS
            command: "ckan geodatagov check-stuck-jobs"
          - schedule: $SCHEDULE_SITEMAP
            command: "ckan geodatagov sitemap-to-s3"

          # 'sitemap-to-s3' : Run on catalog-gather
          - schedule: $SCHEDULE_SITEMAP
            app: catalog-gather
          # 'sitemap-to-s3': Don't monitor
          - schedule: $SCHEDULE_SITEMAP
            monitor: false

          # 'harvester run': Don't monitor
          - schedule: $SCHEDULE_HARVESTING
            monitor: false

          # 'tracking-update': make an issue if longer than 210 mins
          - schedule: $SCHEDULE_TRACKING
            error_seconds: 12600
          # 'tracking-update': Create informational issue
          - schedule: $SCHEDULE_TRACKING
            info_issue: true
          - schedule: $SCHEDULE_TRACKING
            issue_template: .github/tracking-update-info.md

          # 'db-solr-sync': make an issue if longer than 30 mins
          - schedule: $SCHEDULE_DBSOLR_SYNC
            error_seconds: 1800
          # 'db-solr-sync': Create informational issue
          - schedule: $SCHEDULE_DBSOLR_SYNC
            info_issue: true
          - schedule: $SCHEDULE_DBSOLR_SYNC
            issue_template: .github/db-solr-sync-info.md

          # Adjust RAM per space
          - environ: development
            ram: 1G
          - environ: staging
            ram: 3G
          - environ: prod
            ram: 3G
        exclude:
          # 'sitemap-to-s3': Don't run on development/staging
          - schedule: $SCHEDULE_SITEMAP
            environ: development
          - schedule: $SCHEDULE_SITEMAP
            environ: staging
          # 'db-solr-sync': Don't run on development
          - schedule: $SCHEDULE_DBSOLR_SYNC
            environ: development
          # 'check-stuck-jobs': Don't run on development
          - schedule: $SCHEDULE_STUCK_JOBS
            environ: development

    name: ${{ matrix.command }} - ${{matrix.environ}}
    runs-on: ubuntu-latest
    environment: ${{matrix.environ}}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set Unique Command Name
        # yamllint disable rule:line-length
        run: |
          INSTANCE_NAME="$(echo ${{ matrix.command }}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT} | tr -d ' ')"
          echo "INSTANCE_NAME=${INSTANCE_NAME}" | tee -a $GITHUB_ENV
          START=`date +%s` | tee -a $GITHUB_ENV
          # yamllint enable rule:line-length
      - name: ${{ matrix.command }}
        if: ${{ github.event.schedule == matrix.schedule }}
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            cf run-task ${{ matrix.app }}
            --command "${{ matrix.command }}"
            --name "$INSTANCE_NAME"
            -m ${{ matrix.ram }} -k 2G
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: monitor task output
        if: ${{ matrix.monitor && github.event.schedule == matrix.schedule }}
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            tools/monitor_cf_logs.sh ${{ matrix.app }} $INSTANCE_NAME
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: check runtime
        run: |
          END=`date +%s`
          ELAPSED=$(( END - START))
          echo "$START, $END, $ELAPSED"
          if [[ $ELAPSED > ${{ matrix.error_seconds }} ]]; then echo ERROR=true | tee -a $GITHUB_ENV; fi;
          if [[ $ELAPSED > ${{ matrix.error_seconds }} ]]; then echo "ELAPSED=${ELAPSED}" | tee -a $GITHUB_ENV; fi;
      - name: Create Informational Issue for auditing ðŸ“‘
        if: ${{ matrix.info_issue }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
          COMMAND: ${{ matrix.command }}
          SCHEDULE: ${{ matrix.schedule }}
          ENVIRONMENT: ${{ matrix.environ }}
          EXEC_TIME: ${{ env.ELAPSED }}
        with:
          filename: ${{ matrix.issue_template }}
          assignees: ${{ github.actor }}
          update_existing: true
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() || (env.ERROR == true) }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
          COMMAND: ${{ matrix.command }}
          SCHEDULE: ${{ matrix.schedule }}
          ENVIRONMENT: ${{ matrix.environ }}
        with:
          filename: .github/automated_ckan_error.md
          assignees: ${{ github.actor }}
          update_existing: true
