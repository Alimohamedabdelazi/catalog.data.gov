---
name: publish & deploy

on:
  push:
    branches:
      - main

jobs:
  ghcr_publish_catalog:
    name: publish catalog on GHCR
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish catalog.data.gov
        uses: docker/build-push-action@v2
        with:
          context: ckan
          push: true
          tags: ghcr.io/gsa/catalog.data.gov:latest
  
  ghcr_publish_solr:
    name: publish solr on GHCR
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish catalog.data.gov.solr
        uses: docker/build-push-action@v2
        with:
          context: solr
          push: true
          tags: ghcr.io/gsa/catalog.data.gov.solr:latest

  ghcr_publish_db:
    name: publish catalog db on GHCR
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish catalog.data.gov.db
        uses: docker/build-push-action@v2
        with:
          context: postgresql
          push: true
          tags: ghcr.io/gsa/catalog.data.gov.db:latest

  vendor:
    name: vendor dependencies
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: vendor dependencies
        run: ./vendor-requirements.sh
      - uses: actions/upload-artifact@v2
        with:
          name: python-vendored
          path: vendor/
          if-no-files-found: error
  
  staging-db-setup:
    name: db setup (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-db
        id: check-catalog-db-staging
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-db
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-db if necessary
        if: steps.check-catalog-db-staging.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          command: create-service aws-rds small-psql catalog-db --wait
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
  
  staging-redis-setup:
    name: redis setup (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-redis
        id: check-catalog-redis-staging
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-redis
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-redis if necessary
        if: steps.check-catalog-redis-staging.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          command: create-service aws-elasticache-redis redis-dev catalog-redis --wait
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}

  staging-solr-setup:
    name: solr setup (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-solr
        id: check-catalog-solr-staging
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-solr
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-solr if necessary
        if: steps.check-catalog-solr-staging.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          command: create-service solr-cloud base catalog-solr -c '{"solrImageRepo":"ghcr.io/gsa/catalog.data.gov.solr", "solrImageTag":"latest"}' -b ssb-solr-gsa-datagov-staging --wait
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-staging:
    name: deploy (staging)
    environment: staging
    runs-on: ubuntu-latest
    needs:
      - vendor
      - staging-db-setup
      - staging-redis-setup
      - staging-solr-setup
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: python-vendored
          path: vendor
      - name: deploy-ckan
        uses: usds/cloud-gov-cli@master
        with:
          command: push catalog --vars-file vars.staging.yml --strategy rolling
          org: gsa-datagov
          space: staging
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: smoke test
        run: |
          sleep 10
          curl --fail --silent https://catalog-stage-datagov.app.cloud.gov/api/action/status_show?$(date +%s)

  production-db-setup:
    name: db setup (production)
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-db
        id: check-catalog-db-production
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-db
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-db if necessary
        if: steps.check-catalog-db-production.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          # Note the larger db here for prod, options are here
          # https://cloud.gov/docs/services/relational-database/
          command: create-service aws-rds large-gp-psql catalog-db --wait
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
  
  production-redis-setup:
    name: redis setup (production)
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-redis
        id: check-catalog-redis-production
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-redis
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-redis if necessary
        if: steps.check-catalog-redis-production.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          # Note the larger redis here for prod, options are here
          # https://cloud.gov/docs/services/aws-elasticache/
          command: create-service aws-elasticache-redis redis-3node catalog-redis --wait
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}

  production-solr-setup:
    name: solr setup (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check catalog-solr
        id: check-catalog-solr-production
        uses: usds/cloud-gov-cli@master
        continue-on-error: true
        with:
          command: service catalog-solr
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create catalog-solr if necessary
        if: steps.check-catalog-solr-production.outcome == 'failure'
        uses: usds/cloud-gov-cli@master
        with:
          command: create-service solr-cloud base catalog-solr -c '{"solrImageRepo":"ghcr.io/gsa/catalog.data.gov.solr", "solrImageTag":"latest"}' -b ssb-solr-gsa-datagov-prod --wait
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-production:
    name: deploy (production)
    environment: production
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
      - production-db-setup
      - production-redis-setup
      - production-solr-setup
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: python-vendored
          path: vendor
      - name: deploy-ckan
        uses: usds/cloud-gov-cli@master
        with:
          command: push catalog --vars-file vars.production.yml --strategy rolling
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: deploy-gather
        uses: usds/cloud-gov-cli@master
        with:
          command: push catalog-gather --vars-file vars.production.yml
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: deploy-fetch
        uses: usds/cloud-gov-cli@master
        with:
          command: push catalog-fetch --vars-file vars.production.yml
          org: gsa-datagov
          space: prod
          user: ${{secrets.CF_SERVICE_USER}}
          password: ${{secrets.CF_SERVICE_AUTH}}
      - name: smoke test
        run: |
          sleep 10
          curl --fail --silent https://catalog-prod-datagov.app.cloud.gov/api/action/status_show?$(date +%s)
